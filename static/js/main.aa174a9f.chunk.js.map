{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["document","body","addEventListener","classList","add","remove","drumPads","keyCode","keyTrigger","id","url","InactiveStyle","backgroundColor","boxShadow","App","props","playAudio","key","tag","audio","getElementById","volume","state","power","currentTime","play","setState","display","replace","setTimeout","handleVolume","event","newVol","parseFloat","target","value","toFixed","handleClick","e","data","dataset","handleKeyPress","map","item","button","style","bind","handlePower","this","removeEventListener","handleKeypress","querySelector","className","index","data-value","onClick","src","volumeDisplay","React","Component","Display","Volume","type","min","max","step","class","onChange","Power","color","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa174a9f.chunk.js","sourcesContent":["import React from 'react';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './App.css';\n\n// remove focus for mouse users\n\ndocument.body.addEventListener( \"mousedown\", function() {\n  document.body.classList.add( \"usingMouse\" );\n});\ndocument.body.addEventListener( \"keydown\", function() {\n  document.body.classList.remove( \"usingMouse\" );\n});\n\n// AUDIO\n\nconst drumPads = [\n  {\n    keyCode: 81,\n    keyTrigger: \"Q\",\n    id: \"Heater-1\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  },\n  {\n    keyCode: 87,\n    keyTrigger: \"W\",\n    id: \"Heater-2\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  },\n  {\n    keyCode: 69,\n    keyTrigger: \"E\",\n    id: \"Heater-3\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n  },\n  {\n    keyCode: 65,\n    keyTrigger: \"A\",\n    id: \"Heater-4\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n  },\n  {\n    keyCode: 83,\n    keyTrigger: \"S\",\n    id: \"Clap\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n  },\n  {\n    keyCode: 68,\n    keyTrigger: \"D\",\n    id: \"Open-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n  },\n  {\n    keyCode: 90,\n    keyTrigger: \"Z\",\n    id: \"Kick-n'-Hat\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n  },\n  {\n    keyCode: 88,\n    keyTrigger: \"X\",\n    id: \"Kick\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n  },\n  {\n    keyCode: 67,\n    keyTrigger: \"C\",\n    id: \"Closed-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  }\n];\n\n// styles for buttons default and active\n\nconst InactiveStyle = {\n  backgroundColor: \"grey\",\n  boxShadow: \"3px 3px black\"\n};\n\n// eslint-disable-next-line no-unused-vars\nconst ActiveStyle = {\n  backgroundColor: \"red\",\n  boxShadow: \"1px 1px black\"\n};\n\n\n// main component\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: \"\",\n      volume: 0.5,\n      button: \"\",\n      style: InactiveStyle,\n      power: false,\n    };\n    this.handleKeyPress = this.handleKeyPress.bind( this );\n    this.playAudio = this.playAudio.bind( this );\n    this.handleClick = this.handleClick.bind( this );\n    this.handleVolume= this.handleVolume.bind( this );\n    this.handlePower = this.handlePower.bind( this );\n  };\n  \n  componentDidMount() {\n    document.addEventListener( \"keydown\", this.handleKeyPress );\n  };\n  \n  componentWillUnmount() {\n    document.removeEventListener( \"keydown\", this.handleKeypress );\n  };\n  \n  // power on/off\n  \n  handlePower(){\n    this.setState( state => {\n      return { power : !this.state.power }\n    })\n     document.querySelector(\"#power\").classList.add(\"powerClick\");\n    setTimeout( () => { \n      document.querySelector(\"#power\").classList.remove(\"powerClick\"); \n    }, 100);\n    if( this.state.power ) {\n      this.setState( state => {\n        return { display : \"\", }\n      });      \n    }\n  };\n  \n  // play audio / animate keys / update display\n  \n   playAudio = ( key, tag ) => {\n    const audio = document.getElementById( key );\n    audio.volume = this.state.volume;\n    if( this.state.power ) {\n      audio.currentTime = 0;\n      audio.play();\n      this.setState( state => {\n      return { display: tag.replace( /-/g, \" \" ) };\n    });\n    }\n    document.getElementById( tag ).classList.add( \"activeStyle\" );\n    setTimeout( () => {\n      document.getElementById( tag ).classList.remove( \"activeStyle\" );\n    }, 100 );\n  };\n\n// Volume control\n\nhandleVolume = ( event ) => {\n  if( this.state.power ){\n    const newVol = parseFloat( event.target.value).toFixed( 2 );\n    this.setState( state => { return { volume : newVol };\n    });\n        \n  }\n};\n\n// clicking on drum pad\n\n  handleClick = ( e, data ) => {\n    const key = e.target.dataset.value;\n    const tag = e.target.id;\n    this.playAudio( key, tag );\n  };\n\n// using keyboard to play drumpad\n\n  handleKeyPress = e => {\n    // eslint-disable-next-line array-callback-return\n    drumPads.map( item => {\n      if ( e.keyCode === item.keyCode ) {\n        const key = item.keyTrigger;\n        const tag = item.id;\n        this.playAudio( key, tag )\n      }\n      else {\n        return false;\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"drum-machine\" id=\"drum-machine\">\n        <div className=\"drum-pad-wrapper\">\n          {drumPads.map( (item, index) => (\n            <button\n              key={item.id}\n              className=\"drum-pad\"\n              id={ item.id }\n              data-value={ item.keyTrigger }\n              onClick={ this.handleClick }\n            >\n              {item.keyTrigger}\n              <audio className=\"clip\" \n                id={ item.keyTrigger } \n                src={ item.url } />\n            </button>\n            \n          ))}\n        </div>\n        <div className=\"sideBar\">\n          <Display \n            display={ this.state.display } \n            volumeDisplay={ this.state.power ? \"VOL \" + ( this.state.volume * 100 ).toFixed( 0 ) : \"\" }\n            />\n          <div id=\"controls\">\n          <Volume \n            volumeDisplay={ this.state.power ? ( this.state.volume * 100 ).toFixed( 0 ) : \"\" } \n            handleVolume={ this.handleVolume } \n            value={ this.state.volume }/>\n          <Power \n            handlePower={ this.handlePower } \n            power={ this.state.power }/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\n// Display componenet\n\nconst Display = props => {\n  return (\n    <div className=\"display sidebarItems\" id=\"display\">\n      <div id=\"keyDisplay\"><h3>{ props.display }</h3></div>\n      <div id=\"volSection\"><div id=\"value\"><h5> {props.volumeDisplay}</h5></div></div>\n    </div>\n  );\n};\n\n// Volume component\n\nconst Volume = ( props ) => {\n  return(\n    <div className=\"sidebarItems volumeArea\">\n    <div className=\"slideContainer\" id=\"display\">\n      <input \n        type=\"range\" \n        min=\"0.00\" \n        max=\"1.00\" \n        step=\"0.01\" \n        class=\"slider\" \n        value={ props.volume } \n        id=\"range\" \n        onChange={ props.handleVolume }/>\n    </div>\n      \n      </div>\n  );\n};\n\n// Power componenet\n\nclass Power extends React.Component {\n  render() {\n    return(\n    <div>\n      <button \n        style={{ color: this.props.power === true ? \"green\" : \"red\" }} \n        className=\"power\" id=\"power\" \n        onClick={ this.props.handlePower }>\n        <i class=\"fa fa-power-off\" aria-hidden=\"true\"></i>\n      </button>\n    </div>\n  );\n  }\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}